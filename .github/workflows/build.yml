name: Build

on: [push, pull_request]
#on:
#  push:
#    tags:
#      'v*'
#    release:
#      types: [published]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: vcpkg_export
    strategy:
      fail-fast: true
      matrix:
        #os: [ubuntu-latest, windows-latest, macos-latest]
        os: [windows-latest]
        include:
          - arch: x64
            vcpkg_triplet: "x64-windows"
          - arch: x86
            vcpkg_triplet: "x86-windows"

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Install Visual C++ for Python 2.7
        if: runner.os == 'Windows'
        run: |
          choco install vcpython27 -f -y

      - name: Download vcpkg export
        uses: actions/download-artifact@v2
        with:
          name: vcpkg_${{ matrix.arch }}
          path: C:/
      - name: Unzip vcpkg export
        run: |
          unzip vcpkg_x*.zip
          unzip vcpkg-export*.zip
          rm -f *.zip
          cp -ur vcpkg-export-* C:/vcpkg/

      - name: Build wheels
        if: runner.os == 'Windows'
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp27* cp39*"
          CIBW_BEFORE_BUILD: "bash {package}/.github/workflows/before_build.sh ${{ matrix.os }}"
          CIBW_BEFORE_TEST: "cp -r {project}/tests .."
          CIBW_TEST_COMMAND: "SDL_AUDIODRIVER=dummy pytest {project}/../tests"
          CIBW_TEST_REQUIRES: "pytest"
          VCPKG_BUILD: 1
          VCPKG_TOOLCHAIN: "C:/vcpkg/scripts/buildsystems/vcpkg.cmake"

      - name: Build wheels
        if: runner.os != 'Windows'
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp27* cp39*"
          CIBW_BEFORE_BUILD: "bash {package}/.github/workflows/before_build.sh ${{ matrix.os }}"
          CIBW_BEFORE_TEST: "cp -r {project}/tests .."
          CIBW_TEST_COMMAND: "SDL_AUDIODRIVER=dummy pytest {project}/../tests"
          CIBW_TEST_REQUIRES: "pytest"

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  vcpkg_export:
    name: Build Windows dependencies
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x64
            vcpkg_triplet: "x64-windows"
          - arch: x86
            vcpkg_triplet: "x86-windows"

    steps:
      - name: Run vcpkg
        uses: lukka/run-vcpkg@v6
        with:
          vcpkgArguments: ${{ env.packages }}
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: e9ff3cd5a04cd0e8122ff56e9873985ff71aa3ca  # 2020-11-01
          vcpkgTriplet: ${{ matrix.vcpkg_triplet }}
          appendedCacheKey: ${{ hashFiles(env.packages) }}
        env:
          packages: >
            glib libvorbis portmidi sdl1 soundtouch

      - name: Export vcpkg ports
        run: |
          ${{ github.workspace }}\vcpkg\vcpkg list
          ${{ github.workspace }}\vcpkg\vcpkg install ${{ env.packages }}
          ${{ github.workspace }}\vcpkg\vcpkg export --zip ${{ env.packages }}
        env:
          packages: >
            glib libvorbis portmidi sdl1 soundtouch
          VCPKG_TARGET_ARCHITECTURE: "${{ matrix.arch }}"
          VCPKG_DEFAULT_TRIPLET: "${{ matrix.vcpkg_triplet }}"

      - name: Upload vcpkg installed
        uses: actions/upload-artifact@v2
        with:
          name: vcpkg_${{ matrix.arch }}
          path: ${{ env.VCPKG_ROOT }}/vcpkg-export*


#  build_sdist:
#    name: Build source distribution
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Install Python
#        uses: actions/setup-python@v2
#
#      - name: Build sdist
#        run: python setup.py sdist
#
#      - uses: actions/upload-artifact@v2
#        with:
#          path: dist/*.tar.gz
#          name: sdist.tar.gz
